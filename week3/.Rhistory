install.packages("rmarkdown")
install.packages("dplyr")
ggplot(iris,aes(x=Species,y=Petal.Width))+goem_col()
if(!require(ggplot2))install.packages("gapminder",repos = "http://cran.us.r-project.org")
library(ggplot2)
library(dplyr)
library(dplyr)
ggplot(iris,aes(x=Species,y=Petal.Width))+goem_col()
ggplot(iris,aes(x=Species,y=Petal.Width))+goem_bar()
library(ggplot2)
iris
ggplot(iris,aes(x=Species,y=Petal.Width))+goem_bar()
ggplot(iris,aes(x=Species,y=Petal.Width))
+goem_bar()
ggplot(data=iris,aes(x=Species,y=Petal.Width))
+goem_bar()
ggplot(data=iris,aes(x=Species,y=Petal.Width))+
goem_bar()
library(ggplot2)
library(dplyr)
iris
ggplot(data=iris,aes(x=Species,y=Petal.Width))+goem_bar()
ggplot(data=iris,aes(x=Species,y=Petal.Width))+goem_bar()
ggplot(data=iris,aes(x=Species,y=Petal.Width))+goem_bar()
library(ggplot2)
library(dplyr)
iris
search()
ggplot(data=iris,aes(x=Species,y=Petal.Width))+goem_bar()
ggplot(data=iris,aes(x=Species,y=Petal.Width))+geom_bar()
ggplot(data=iris,aes(x=Species,y))+geom_bar()
ggplot(data=iris,aes(x=Species))+geom_bar()
iris
ggplot(data=iris,aes(x=Sepal.Width))+histogram()
ggplot(data=iris,aes(x=Sepal.Width))+geom_histogram()
ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species))+geom_point()
iris
ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species,size=Petal.Length))+geom_point()
ggplot(data=iris,aes(x=Species,y=Sepal.Length))+geom_boxplot
ggplot(data=iris,aes(x=Species,y=Sepal.Length))+geom_boxplot()
ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length))+geom_point()+facet_wrap(~Species)
library(ggplot2)
library(dplyr)
ggplot(data=iris,aes(x=Species))+geom_bar()
ggplot(data=iris,aes(x=Sepal.Width))+geom_histogram()
ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species,size=Petal.Length))+geom_point()
ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length))+geom_point()+facet_wrap(~Species)
ggplot(data=iris,aes(x=Species,y=Sepal.Length))+geom_boxplot()
ggplot(data=iris,aes(x=Sepal.Width))+geom_histogram()
installed.packages("comics")
library(comics)
installed.packages("Comics")
library(Comics)
Comics
Cars
library(Cars)
library(cars)
cars
comics
Immigration
install.packages("Immigration")
library(Immigration)
Immigration
install.packages("immigration")
library(immigration)
immigration
gapminder
library(gapminder)
gapminder
cluster
library(cluster)
cluster
life_exp_raw
installed.packages("life_exp_raw")
library(life_exp_raw)
life_exp_raw
comic
s
comics
names
library(names)
names
installed.packages("names")
comics data
comics_data
install.packages("openintro")
setwd("C:/Users/hank7/Desktop/summer/NTU-R/week3")
install.packages("car")
install.packages("gridExtra")
install.packages("plotly")
install.packages("cowplot")
# setup
knitr::opts_chunk$set(message=FALSE, fig.height=3, fig.width=5)
library(ggplot2) # to make pretty plots
library(dplyr) # for inner_join and left_join
library(car) # to recode
library(maps) # for the maps
library(gridExtra) # to arrange the plots in grids
library(plotly) # for interactive plots
library(cowplot) # to have get_legent
#read the datasets and take a look
happy_2015 <- read.csv("2015.csv")
happy_2016 <- read.csv("2016.csv")
happy_2017 <- read.csv("2017.csv")
str(happy_2015)
str(happy_2016)
str(happy_2017)
# Based on the structure, rename columns to prepare for merging
colnames(happy_2015) <- c("Country","Region","Rank_2015","Score_2015","Err_2015","GDP_2015","Family_2015","Health_2015","Freedom_2015","Gov_2015","Generosity_2015","Dist_res_2015")
colnames(happy_2016) <- c("Country","Region_2016","Rank_2016","Score_2016","LCI_2016","UCI_2016","GDP_2016","Family_2016","Health_2016","Freedom_2016","Gov_2016","Generosity_2016","Dist_res_2016")
colnames(happy_2017) <- c("Country","Rank_2017","Score_2017","Whisker.high_2016","Whisker.low_2017","GDP_2017","Family_2017","Health_2017","Freedom_2017","Generosity_2017","Gov_2017","Dist_res_2017")
happy_2015
?merge
# And finally merge the datasets into one
happy <- merge(happy_2015, happy_2016, by.x = "Country", by.y = "Country")
happy <- merge(happy, happy_2017, by.x = "Country", by.y = "Country")
happy$Region_2016 <- NULL
str(happy) # when running for the first time, check the structure of the merged dataset
# rename some countries
happy$Country <- recode(happy$Country,
"'Congo (Brazzaville)' = 'Democratic Republic of the Congo';
'Congo (Kinshasa)'='Republic of Congo';
'United States'='USA';
'United Kingdom'= 'UK'
")
happy$Region_2016
happy
happy$Country <- recode(happy$Country,
"'Congo (Brazzaville)' = 'Democratic Republic of the Congo';
'Congo (Kinshasa)'='Republic of Congo';
'United States'='USA';
'United Kingdom'= 'UK'
")
w <- map_data("world")
colnames(w)[5]<- "Country"
w
str(w)
colnames(w)[5]<- "Country"
w
str(w)
myw <- inner_join(w, happy, by = "Country")
happy[:1]
happy[,1]
happy[,1]=as.character
happy[,1]=as.character(happy[,1])
happy[,1]
myw <- inner_join(w, happy, by = "Country")
myw
?inner_join
happy[,1]=as.character(happy[,1])
# setup
knitr::opts_chunk$set(message=FALSE, fig.height=3, fig.width=5)
library(ggplot2) # to make pretty plots
library(dplyr) # for inner_join and left_join
library(car) # to recode
library(maps) # for the maps
library(gridExtra) # to arrange the plots in grids
library(plotly) # for interactive plots
library(cowplot) # to have get_legent
happy_2015 <- read.csv("2015.csv")
happy_2016 <- read.csv("2016.csv")
happy_2017 <- read.csv("2017.csv")
str(happy_2015)
str(happy_2016)
str(happy_2017)
colnames(happy_2015) <- c("Country","Region","Rank_2015","Score_2015","Err_2015","GDP_2015","Family_2015","Health_2015","Freedom_2015","Gov_2015","Generosity_2015","Dist_res_2015")
colnames(happy_2016) <- c("Country","Region_2016","Rank_2016","Score_2016","LCI_2016","UCI_2016","GDP_2016","Family_2016","Health_2016","Freedom_2016","Gov_2016","Generosity_2016","Dist_res_2016")
colnames(happy_2017) <- c("Country","Rank_2017","Score_2017","Whisker.high_2016","Whisker.low_2017","GDP_2017","Family_2017","Health_2017","Freedom_2017","Generosity_2017","Gov_2017","Dist_res_2017")
happy <- merge(happy_2015, happy_2016, by.x = "Country", by.y = "Country")
happy <- merge(happy, happy_2017, by.x = "Country", by.y = "Country")
happy$Region_2016 <- NULL
str(happy)
happy$Country <- recode(happy$Country,
"'Congo (Brazzaville)' = 'Democratic Republic of the Congo';
'Congo (Kinshasa)'='Republic of Congo';
'United States'='USA';
'United Kingdom'= 'UK'
")
happy[,1]=as.character(happy[,1])
library(bitops)
library(httr)
library(RCurl)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(devtools)
install_github("ggbiplot", "vqv")
library(scales)
library(grid)
library(ggbiplot)
library(bitops)
library(httr)
library(RCurl)
install.packages("RCurl")
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(devtools)
install.packages("devtools")
install_github("ggbiplot", "vqv")
library(scales)
library(grid)
library(ggbiplot)
install.packages("ggbiplot")
w <- map_data("world")
colnames(w)[5]<- "Country"
myw <- inner_join(w, happy, by = "Country")
worldplot <- ggplot(data = w, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray") +
geom_polygon(data=myw, aes(x = long, y = lat, group = group, fill = Score_2017),color = "white") +
geom_polygon(color = "black", fill = NA) +
theme_bw() +
ggtitle("Happiness Score in 2017 in the World") +
scale_fill_distiller(palette = "Spectral")
worldplot
w <- map_data("world")
colnames(w)[5]<- "Country"
myw <- inner_join(w, happy, by = "Country")
worldplot <- ggplot(data = w, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) +
geom_polygon(color = "black", fill = "gray") +
geom_polygon(data=myw, aes(x = long, y = lat, group = group, fill = Score_2017),color = "white") +
geom_polygon(color = "black", fill = NA) +
theme_bw() +
ggtitle("Happiness Score in 2017 in the World") +
scale_fill_distiller(palette = "Spectral")
worldplot
w <- map_data("world")
colnames(w)[5]<- "Country"
myw <- inner_join(w, happy, by = "Country")
worldplot <- ggplot(data = w, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray") +
geom_polygon(data=myw, aes(x = long, y = lat, group = group, fill = Score_2017),color = "white") +
geom_polygon(color = "black", fill = NA) +
theme_bw() +
ggtitle("Happiness Score in 2017 in the World") +
scale_fill_distiller(palette = "Spectral")
worldplot
w <- map_data("world")
colnames(w)[5]<- "Country"
myw <- inner_join(w, happy, by = "Country")
worldplot <- ggplot(data = w, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) +
geom_polygon(color = "black", fill = "gray") +
geom_polygon(data=myw, aes(x = long, y = lat, group = group, fill = Score_2017),color = "white") +
geom_polygon(color = "black", fill = NA) +
theme_bw() +
ggtitle("Happiness Score in 2017 in the World") +
scale_fill_distiller(palette = "Spectral")
worldplot
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
library(XML)
library(XML)
library(XML2)
library(xml2)
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
install.packages("XML")
library(XML)
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
html
content(html, "text", encoding = "UTF-8")
html <- htmlParse( GET(url), encoding = "UTF-8" )
html
html <- htmlParse( url, encoding = "UTF-8" )
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
url.list <- xpathSApply( html, "//div[@class='title']/a[@href]", xmlAttrs )
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
url.list <- xpathSApply( html, "//div[@class='mw-parser-output']", xmlAttrs )
url.list
library(bitops)
library(httr)
library(RCurl)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(devtools)
install_github("ggbiplot", "vqv")
library(scales)
library(grid)
library(ggbiplot)
library(XML)
#url  <- paste0( prefix, as.character(id), ".html" )
url <- "https://zh.wikisource.org/wiki/%E7%B4%85%E6%A8%93%E5%A4%A2/%E7%AC%AC020%E5%9B%9E"
html <- htmlParse( GET(url) )
url.list <- xpathSApply( html, "//div[@class='mw-parser-output']", xmlAttrs )
url.list
url.list <- xpathSApply( html, "//p]", xmlAttrs )
url.list <- xpathSApply( html, "//p", xmlAttrs )
url.list
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
mixseg = worker()
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
TDM
View(TDM)
library(bitops)
library(httr)
library(RCurl)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(devtools)
install_github("ggbiplot", "vqv")
library(scales)
library(grid)
library(ggbiplot)
library(XML)
d.corpus <- Corpus( DirSource("./DATA") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
mixseg = worker()
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
View(TDM)
kable(head(TDM))
install.packages("kable")
?kable
install.packages("knitr")
kable(head(TDM))
kable(tail(TDM))
install.packages("reshape2")
kable(head(TDM))
kable(tail(TDM))
install.packages("Quandl")
kable(head(TDM))
kable(tail(TDM))
install,package
install.packages("kableExtra")
library(knitr)
kable(head(TDM))
kable(tail(TDM))
tf <- apply(as.matrix(TDM[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(n+1)]), 1, idfCal)
doc.tfidf <- TDM
tempY = matrix(rep(c(as.matrix(tf)), each = length(idf)), nrow = length(idf))
tempX = matrix(rep(c(as.matrix(idf)), each = length(tf)), ncol = length(tf), byrow = TRUE)
doc.tfidf[,2:(n+1)] <- (doc.tfidf[,2:(n+1)] / tempY) * tempX
stopLine = rowSums(doc.tfidf[,2:(n+1)])
delID = which(stopLine == 0)
delID
doc.tfidf
delID
doc.tfidf
View(doc.tfidf)
